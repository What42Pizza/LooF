#ignore_header

#include Basics.LOOF





function print  -> ToPrint
	callOutside "console", "println", ToPrint
	return
end



function exit
	callOutside "interpreter", "stop"
	return
end





function addItem  -> Table, Item
	Table[lengthOf Table] = Item
	return
end



function removeIndex  -> Table, Index
	loop i, Index, endOf Table - 1
		Table[i] = Table[i + 1]
	repeat
	Table[endOf Table] = null
	return
end



function addAll  -> TargetTable, SourceTable
	forEach Item, SourceTable
		Table[lengthOf Table] = Items
	repeat
	return
end



function removeDuplicateitems  -> TableIn
	loop i, endOf TableIn, 0, -1
		CurrentItem = TableIn[i]
		DuplicateIndex = lastIndexOfItem {TableIn, CurrentItem, i - 1}
		if not DuplicateIndex; continue
		:removeIndex TableIn, DuplicateIndex
		// `i --` is not needed since this will search for CurrentItem again on the next loop, which is what we want
	repeat
	return
end



function cloneTable  -> TableIn
	errorIf (typeOf TableIn != "table"), ("Basics.cloneTable must take a table as its first argument"), {"InvalidArgType"}
	NewTable = {}
	loop i, 0, endOf TableIn
		NewTable[i] = TableIn[i]
	repeat
	TableInKeys = keysOf TableIn
	loop i, 0, endOf TableInKeys
		CurrentKey = TableInKeys[i]
		NewTable[CurrentKey] = TableIn[CurrentKey]
	repeat
	return NewTable
end



function deepCloneTable  -> ValueIn
	returnIf (typeOf ValueIn != "table"), ValueIn
	TableIn = ValueIn
	NewTable = {}
	loop i, 0, endOf TableIn
		:deepCloneTable TableIn[i]  -> ClonedValue
		NewTable[i] = ClonedValue
	repeat
	TableInKeys = keysOf TableIn
	loop i, 0, endOf TableInKeys
		CurrentKey = TableInKeys[i]
		:deepCloneTable TableIn[CurrentKey]  -> ClonedValue
		NewTable[CurrentKey] = ClonedValue
	repeat
	return NewTable
end





function ensureArgTypesAreCorrect  -> Args, ArgTypes, FunctionName
	FunctionName defaultsTo "unnamed"
	loop i, 0, lengthOf ArgsTypes - 1
		errorIf (typeOf Args[i] != ArgTypes[i]), ("Arg " .. i .. " of function \"" .. FunctionName .. "\" must be of type " .. ArgTypes[i] .. ", not type " .. typeOf Args[i] .. "."), {"InvalidArgType", FunctionName}
	repeat
	return
end